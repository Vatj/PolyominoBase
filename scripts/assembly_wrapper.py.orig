#!/usr/bin/env python
import ctypes
import os
import os.path
from sys import platform
import numpy as np

from graph_methods import Trim_Topologies

Poly_Lib = ctypes.cdll.LoadLibrary('/rscratch/vatj2/Polyominoes/PolyominoBase/scripts/AGF.so')


<<<<<<< HEAD
def GetPhenotypesIDs_wrapper(file_path, file_name, ngenes, colours):
    Poly_Lib.GetPhenotypesIDs.restype = None
    Poly_Lib.GetPhenotypesIDs.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_uint8, ctypes.c_uint8]
    c_ = ctypes.c_buffer(file_path)
    o_ = ctypes.c_buffer(file_name)
||||||| merged common ancestors
Poly_Lib=ctypes.cdll.LoadLibrary('/rscratch/vatj2/Polyominoes/PolyominoBase/scripts/AGF.so')
=======
Poly_Lib=ctypes.cdll.LoadLibrary('./AGF.so')
>>>>>>> ac935c41bf60e528c3452f5c5d9e90e5a409b0ca

<<<<<<< HEAD
    Poly_Lib.GetPhenotypesIDs(c_, o_, ngenes, colours)

def PreProcessWrite_wrapper(file_path, file_name, ngenes, colours):
    Poly_Lib.PreProcessWrite.restype = None
    Poly_Lib.PreProcessWrite.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_uint8, ctypes.c_uint8]
    c_ = ctypes.c_buffer(file_path)
    o_ = ctypes.c_buffer(file_name)
||||||| merged common ancestors
def GetPhenotypesIDs_wrapper(file_path, file_name, ngenes, cols, g_or_i):
    Poly_Lib.GetPhenotypesIDs.restype=None
    Poly_Lib.GetPhenotypesIDs.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    o_=ctypes.c_buffer(file_name)
    assert os.path.isfile(file_path+file_name), "not a valid file"

    Poly_Lib.GetPhenotypesIDs(c_,o_,ngenes,cols,g_or_i)
=======
def GetPhenotypesIDs_wrapper(file_path,file_name,ngenes,cols,g_or_i): 
    Poly_Lib.GetPhenotypesIDs.restype=None
    Poly_Lib.GetPhenotypesIDs.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    o_=ctypes.c_buffer(file_name)
    assert os.path.isfile(file_path+file_name), "not a valid file"
    
    Poly_Lib.GetPhenotypesIDs(c_,o_,ngenes,cols,g_or_i)
>>>>>>> ac935c41bf60e528c3452f5c5d9e90e5a409b0ca

    Poly_Lib.PreProcessWrite(c_, o_, ngenes, colours)


<<<<<<< HEAD
def ExhaustiveMinimalMethod_wrapper(file_path, ngenes, colours):
    Poly_Lib.ExhaustiveMinimalGenotypes.restype = None
    Poly_Lib.ExhaustiveMinimalGenotypes.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_uint8, ctypes.c_uint8]
    c_ = ctypes.c_buffer(file_path)
    Poly_Lib.ExhaustiveMinimalGenotypes(c_, ngenes, colours)

||||||| merged common ancestors
def GPMap_wrapper(file_path,ngenes,rcols,cols,g_or_i):
    Poly_Lib.GP_MapSampler.restype=None
    Poly_Lib.GP_MapSampler.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    Poly_Lib.GP_MapSampler(c_,ngenes,rcols,cols,g_or_i)

def PreProcessGenotypes_wrapper(file_path,ngenes,cols,g_or_i):
    Poly_Lib.PreProcessGenotypes.restype=None
    Poly_Lib.PreProcessGenotypes.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    Poly_Lib.PreProcessGenotypes(c_,ngenes,cols,g_or_i)
=======
def GPMap_wrapper(file_path,ngenes,rcols,cols,g_or_i):
    Poly_Lib.GP_MapSampler.restype=None
    Poly_Lib.GP_MapSampler.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    Poly_Lib.GP_MapSampler(c_,ngenes,rcols,cols,g_or_i)
    
def PreProcessGenotypes_wrapper(file_path,ngenes,cols,g_or_i):
    Poly_Lib.PreProcessGenotypes.restype=None
    Poly_Lib.PreProcessGenotypes.argtypes=[ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_bool]
    c_=ctypes.c_buffer(file_path)
    Poly_Lib.PreProcessGenotypes(c_,ngenes,cols,g_or_i)
>>>>>>> ac935c41bf60e528c3452f5c5d9e90e5a409b0ca

def SampleMinimalMethod_wrapper(file_path, ngenes, colours, samples, dups):
    Poly_Lib.SampleMinimalGenotypes.restype = None
    Poly_Lib.SampleMinimalGenotypes.argtypes = [ctypes.POINTER(ctypes.c_char),ctypes.c_uint8,ctypes.c_uint8,ctypes.c_uint32,ctypes.c_bool]
    c_ = ctypes.c_buffer(file_path)
    Poly_Lib.SampleMinimalGenotypes(c_, ngenes, colours, samples, dups)

<<<<<<< HEAD

def GPMap_wrapper(file_path, ngenes, rcolours, colours):
    Poly_Lib.GP_MapSampler.restype = None
    Poly_Lib.GP_MapSampler.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_uint8, ctypes.c_uint8, ctypes.c_uint8]
    c_ = ctypes.c_buffer(file_path)
    Poly_Lib.GP_MapSampler(c_, ngenes, rcolours, colours)


def GenerateGenotypes(file_path, ngenes, colours, samples=-1):
    if samples == -1:
        ExhaustiveMinimalMethod_wrapper(file_path, ngenes, colours)
        PreProcessWrite_wrapper(file_path, "ExhaustiveGenotypes".encode("utf-8"), ngenes, colours)
||||||| merged common ancestors
def GenerateGenotypes(file_path, ngenes, cols, samples=-1):
    if samples==-1:
        ExhaustiveMinimalMethod_wrapper(file_path, ngenes, cols, True)
        Trim_Topologies(file_path + 'SampledGenotypes_N{}_C{}.txt'.format(ngenes, cols))
=======
def GenerateGenotypes(file_path,ngenes,cols,samples=-1):
    if samples==-1:
        ExhaustiveMinimalMethod_wrapper(file_path,ngenes,cols,True)
        Trim_Topologies(file_path+'SampledGenotypes_N{}_C{}.txt'.format(ngenes,cols))
>>>>>>> ac935c41bf60e528c3452f5c5d9e90e5a409b0ca
    else:
<<<<<<< HEAD
        SampleMinimalMethod_wrapper(file_path, ngenes, colours, samples, True)
||||||| merged common ancestors
        SampleMinimalMethod_wrapper(file_path, ngenes, cols, samples, True, True)
        Trim_Topologies(file_path+'SampledGenotypes_N{}_C{}.txt'.format(ngenes, cols).encode('utf-8'))
    PreProcessGenotypes_wrapper(file_path, ngenes, cols, True)
=======
        SampleMinimalMethod_wrapper(file_path,ngenes,cols,samples,True,True)
        Trim_Topologies(file_path+'SampledGenotypes_N{}_C{}.txt'.format(ngenes,cols))
    PreProcessGenotypes_wrapper(file_path,ngenes,cols,True)
    

>>>>>>> ac935c41bf60e528c3452f5c5d9e90e5a409b0ca
